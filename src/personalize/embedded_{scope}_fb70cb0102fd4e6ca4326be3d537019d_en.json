{
  "clientKey": "3509a0a2b7cc0542af1e697ea16dafe9",
  "href": "https://api-us.boxever.com/v3/flowDefinitions/230cb46c-de8b-42b1-b65e-aa5d6fc9629a",
  "ref": "230cb46c-de8b-42b1-b65e-aa5d6fc9629a",
  "name": "embedded_{scope}_fb70cb0102fd4e6ca4326be3d537019d_en",
  "modifiedByRef": "auth0|67858abeeb72b028e05811b3",
  "modifiedAt": "2025-01-13T23:05:42.351Z",
  "revision": 2,
  "archived": false,
  "friendlyId": "embedded_{scope}_fb70cb0102fd4e6ca4326be3d537019d_en",
  "type": "INTERACTIVE_API_FLOW",
  "subtype": "EXPERIENCE",
  "channels": [
    "WEB"
  ],
  "triggers": [],
  "dashboardLinks": [],
  "tags": [],
  "businessProcess": "interactive_v1",
  "siteId": "caf39d4e-d6ee-4714-979d-82f5bf6cf692",
  "traffic": {
    "type": "audienceTraffic",
    "weightingAlgorithm": "USER_DEFINED",
    "modifiedAt": "2025-01-13T23:05:42.486Z",
    "splits": [
      {
        "template": "{\"variantId\": \"f0562587c9f44af69eda938334646d97\"}",
        "variantName": "Katie",
        "audienceName": "Katie",
        "conditionGroups": [
          {
            "conditions": [
              {
                "templateId": "country_region",
                "params": {
                  "is": "is",
                  "country": "US",
                  "region(s)": "AK"
                }
              }
            ]
          },
          {
            "unionType": "AND",
            "conditions": [
              {
                "templateId": "utm_value",
                "params": {
                  "type": "campaign",
                  "compares to": "is equal to",
                  "UTM value": "1234"
                }
              }
            ]
          }
        ]
      }
    ]
  },
  "variants": [],
  "transpiledVariants": [
    {
      "ref": "772d3c8d-9ed7-4c35-ab25-2a1c780ba30b",
      "name": "Katie",
      "tasks": [
        {
          "implementation": "templateRenderTask",
          "input": {
            "inputType": "templateRenderTaskInput",
            "type": "application/json",
            "template": "{\"variantId\": \"f0562587c9f44af69eda938334646d97\"}"
          }
        },
        {
          "implementation": "conditionsTask",
          "input": {
            "inputType": "conditionsTaskInput",
            "rules": [
              {
                "id": "scriptCondition",
                "name": "Combined condition groups",
                "description": "Combined templates within condition group for targeted experience",
                "ruleData": {
                  "expression": "(function () {\n    var visited = \"is\";\n    var countriesString = \"US\";\n    var regionsString = \"AK\";\n    var countriesArray = countriesString.split(\",\");\n    var regionsArray = regionsString.split(\",\");\n    var expectedType = \"WEB\";\n    var expectedStatus = \"OPEN\";\n    var regionMatch = false;\n        \n    if (request && request.params && request.params.geo && request.params.geo.country) {\n        if(countriesArray.indexOf(request.params.geo.country) > -1 && request.params.geo.region) {\n            regionMatch = regionsArray.indexOf(request.params.geo.region) > -1;\n        }\n    } else if (request && request.requestDetails && request.requestDetails.headers && request.requestDetails.headers[\"cf-ipCountry\"]) {\n        if (countriesArray.indexOf(request.requestDetails.headers[\"cf-ipCountry\"]) > -1 && request.requestDetails.headers[\"cf-region-code\"]) {\n            regionMatch = regionsArray.indexOf(request.requestDetails.headers[\"cf-region-code\"]) > -1;\n        }\n        \n    } else if (guest && guest.sessions && guest.sessions.length > 0) {\n        loop:\n        for (var i = 0; i < guest.sessions.length; i++) {\n            if (guest.sessions[i]) {\n                if (guest.sessions[i].sessionType !== expectedType || guest.sessions[i].status !== expectedStatus) {\n                    continue loop;\n                } else if ( guest.sessions[i].dataExtensions) {\n                    for (var j = 0; j < guest.sessions[i].dataExtensions.length; j++) {\n                       if (guest.sessions[i].dataExtensions[j].key && guest.sessions[i].dataExtensions[j].key === \"bxt\") {\n                           if (guest.sessions[i].dataExtensions[j].values && guest.sessions[i].dataExtensions[j].values.geoLocationCountry) {\n                               if (countriesArray.indexOf(guest.sessions[i].dataExtensions[j].values.geoLocationCountry) > -1) {    \n                                      regionMatch = regionsArray.indexOf(guest.sessions[i].dataExtensions[j].values.geoLocationRegion) > -1;\n                                      if (regionMatch) {\n                                          break;\n                                      }\n                               }\n                           }\n                       } \n                    }\n                }\n            }\n        }\n    }\n                \n    return ((visited === \"is\") && regionMatch) || ((visited === \"is not\") && !regionMatch);\n})() && (function () {\n    var compareValue = \"is equal to\";\n    var utmType = \"campaign\";\n    var utmValue = \"1234\";\n    var utmMultiValue = \"\";\n    var utmArray = utmMultiValue.split(',');\n    var utmMatch = false;\n    \n    \n    if (request && request.params && request.params.utm) {\n        if (request.params.utm[utmType]) {\n            if (compareValue === 'is equal to') {\n               utmMatch = request.params.utm[utmType] === utmValue; \n            } else if (compareValue === 'includes any of') {\n                for (var k = 0; k < utmArray.length; k++) {\t\n                    if (request.params.utm[utmType] === utmArray[k]) {\t\n                        utmMatch = true;\t\n                        break;\t\n                    }\n                }\n            } else if (compareValue === 'contains') {\n                utmMatch = request.params.utm[utmType].indexOf(utmValue) >= 0 ? true : false;\n            } else if (compareValue === 'starts with') {\n                utmMatch = request.params.utm[utmType].startsWith(utmValue);\n            } else if (compareValue === 'ends with') {\n                utmMatch = request.params.utm[utmType].endsWith(utmValue);\n            } else if (compareValue === 'is null') {\n                utmMatch = !request.params.utm[utmType];\n            }\n        } else if (compareValue === 'is null') {\n      \t    utmMatch = true;\n        }\n    } else if (guest.sessions && guest.sessions.length > 0) {\n        var currentSession = null;\n        for (var i = 0; i < guest.sessions.length; i++) {\n          if (guest.sessions[i].channel === \"WEB\") {\n            currentSession = guest.sessions[i];\n            break;\n          }\n        }\n        if (currentSession && currentSession.events && currentSession.events.length > 0) {\n            var firstEventIndex = currentSession.events.length - 1;\n            var firstEvent = currentSession.events[firstEventIndex];\n            var utmTypeProperty = 'utm_' + utmType;\n            if (firstEvent.arbitraryData && firstEvent.arbitraryData[utmTypeProperty]) {\n                if (compareValue === 'is equal to') {\n                    utmMatch = firstEvent.arbitraryData[utmTypeProperty] === utmValue; \n                } else if (compareValue === 'includes any of') {\n                    for (var m = 0; m < utmArray.length; m++) {\t\n                        if (firstEvent.arbitraryData[utmTypeProperty] === utmArray[m]) {\t\n                            utmMatch = true;\t\n                            break;\t\n                        }\n                    }\n                } else if (compareValue === 'contains') {\n                    utmMatch = firstEvent.arbitraryData[utmTypeProperty].indexOf(utmValue) >= 0 ? true : false;\n                } else if (compareValue === 'starts with') {\n                    utmMatch = firstEvent.arbitraryData[utmTypeProperty].startsWith(utmValue);\n                } else if (compareValue === 'ends with') {\n                    utmMatch = firstEvent.arbitraryData[utmTypeProperty].endsWith(utmValue);\n                } else if (compareValue === 'is null') {\n                    utmMatch = !firstEvent.arbitraryData[utmTypeProperty];\n                }\n            } else if (compareValue === 'is null') {\n          \t    utmMatch = true;\n            }\n        }\n    }\n    \n    return utmMatch;\n})();"
                }
              }
            ]
          }
        }
      ]
    }
  ],
  "status": "PRODUCTION",
  "schedule": {
    "type": "simpleSchedule",
    "startDate": "2025-01-13T23:03:46.343Z"
  },
  "revisions": {
    "href": "https://api-us.boxever.com/v3/flowDefinitions/230cb46c-de8b-42b1-b65e-aa5d6fc9629a/revisions"
  },
  "sampleSizeConfig": {
    "baseValue": 0.15,
    "minimumDetectableDifference": 0.02,
    "confidenceLevel": 0.95
  },
  "notificationEnabled": false
}
